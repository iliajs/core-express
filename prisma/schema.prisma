generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  username     String        @unique @db.VarChar(255)
  email        String        @unique @db.VarChar(255)
  telegramUserId  String?    @unique @db.VarChar(255)
  hash         String        @db.VarChar(60)
  firstName    String        @db.VarChar(255)
  lastName     String        @db.VarChar(255)
  words        Word[]
  translations Translation[]
  tags         Tag[]
  tagsOnWords  TagsOnWords[]
  clients      Client[]
  timeSlots    TimeSlot[]
  config       Json?
  authCode     String?        @db.VarChar(4)
  authCodeTime DateTime?      @db.Timestamptz(6)
  regCode      String?        @db.VarChar(6)
  regCodeTime  DateTime?      @db.Timestamptz(6)
  rpCode       String?        @db.Uuid
  rpCodeTime   DateTime?      @db.Timestamptz(6)
  active       Boolean?
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?      @db.Timestamptz(6)
}

model Word {
  id           String        @id @default(uuid()) @db.Uuid
  title        String        @unique @db.VarChar(255)
  translations Translation[]
  tags         TagsOnWords[]
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @db.Uuid
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?     @db.Timestamptz(6)
}

model Translation {
  id        String    @id @default(uuid()) @db.Uuid
  text      String    @db.VarChar(1000)
  word      Word      @relation(fields: [wordId], references: [id])
  wordId    String    @db.Uuid
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.Uuid
  updatedAt DateTime? @db.Timestamptz(6)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
}

model Tag {
  id        String        @id @default(uuid()) @db.Uuid
  name      String        @unique @db.VarChar(255)
  words     TagsOnWords[]
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @db.Uuid
  createdAt DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt DateTime?     @db.Timestamptz(6)
}

model TagsOnWords {
  word      Word     @relation(fields: [wordId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  wordId    String   @db.Uuid
  tag       Tag      @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tagId     String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@id([wordId, tagId])
}

model Client {
  id        String     @id @default(uuid()) @db.Uuid
  name      String     @unique @db.VarChar(255)
  timeSlots TimeSlot[]
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @db.Uuid
  archived  Boolean?
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime?  @db.Timestamptz(6)
}

model TimeSlot {
  id        String    @id @default(uuid()) @db.Uuid
  client    Client?   @relation(fields: [clientId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  clientId  String?   @db.Uuid
  date      Int?      @db.Integer
  time      String    @db.VarChar(8)
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.Uuid
  comment   String?   @db.VarChar(500)
  archived  Boolean?
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @db.Timestamptz(6)
}
